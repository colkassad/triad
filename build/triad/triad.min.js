/*! triad 2015-02-28 */
function Triad(){}Triad.prototype.getConvexHull=function(a){var b=this;if(a.features.length<=2)return{type:"Feature",geometry:{type:"Polygon",coordinates:[[]]},properties:{}};var c=a.features.map(function(a){return a.geometry.coordinates});c.sort(function(a,b){return a[0]==b[0]?a[1]-b[1]:a[0]-b[0]});for(var d=[],e=0;e<c.length;e++){for(;d.length>=2&&b.crossProduct(d[d.length-2],d[d.length-1],c[e])<=0;)d.pop();d.push(c[e])}for(var f=[],e=c.length-1;e>=0;e--){for(;f.length>=2&&b.crossProduct(f[f.length-2],f[f.length-1],c[e])<=0;)f.pop();f.push(c[e])}f.pop(),d.pop();var g=d.concat(f);g.push(g[0]);var h=JSON.stringify({type:"Feature",geometry:{type:"Polygon",coordinates:[[g]]},properties:{}});return JSON.parse(h)},Triad.prototype.getLineString=function(a){var b=(a.features.map(function(a){return a.geometry.coordinates}),JSON.stringify({type:"Feature",geometry:lineCoords,properties:{}}));return JSON.parse(b)},Triad.prototype.crossProduct=function(a,b,c){return(b[0]-a[0])*(c[1]-a[1])-(b[1]-a[1])*(c[0]-a[0])};