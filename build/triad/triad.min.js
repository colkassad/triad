/*! triad 2015-03-16 */
function Triad(){}Triad.prototype.getConvexHull=function(a){var b=this;if(a.features.length<=2)return{type:"Feature",geometry:{type:"Polygon",coordinates:[[]]},properties:{}};var c=a.features.map(function(a){return a.geometry.coordinates});c.sort(function(a,b){return a[0]==b[0]?a[1]-b[1]:a[0]-b[0]});for(var d=[],e=0;e<c.length;e++){for(;d.length>=2&&b.crossProduct(d[d.length-2],d[d.length-1],c[e])<=0;)d.pop();d.push(c[e])}for(var f=[],e=c.length-1;e>=0;e--){for(;f.length>=2&&b.crossProduct(f[f.length-2],f[f.length-1],c[e])<=0;)f.pop();f.push(c[e])}f.pop(),d.pop();var g=d.concat(f);g.push(g[0]);var h=JSON.stringify({type:"Feature",geometry:{type:"Polygon",coordinates:[[g]]},properties:{}});return JSON.parse(h)},Triad.prototype.getLineString=function(a){var b=a.features.map(function(a){return a.geometry.coordinates}),c=JSON.stringify({type:"Feature",geometry:b,properties:{}});return JSON.parse(c)},Triad.prototype.getPolygon=function(){},Triad.prototype.inside=function(a,b){var c=this,d=b.geometry.coordinates;"Polygon"===b.geometry.type&&(d=[d]);var e,f=!0;if(b.bbox&&(e=b.bbox),b.geometry.bbox&&(e=b.geometry.bbox),e){var g=a.geometry.coordinates[0],h=a.geometry.coordinates[1];(g<e[0]||g>e[2]||h<e[1]||h>e[3])&&(f=!1)}if(f)for(var i=0;i<d.length;i++)if(c.inRing(a,d[i][0])){for(var j=1;j<d[i].length;){if(c.inRing(a,d[i][j]))return!1;j++}return!0}return!1},Triad.prototype.inRing=function(a,b){for(var c=!1,d=0,e=b.length-1;d<b.length;e=d++)b[d][1]>a.geometry.coordinates[1]!=b[e][1]>a.geometry.coordinates[1]&&a.geometry.coordinates[0]<(b[e][0]-b[d][0])*(a.geometry.coordinates[1]-b[d][1])/(b[e][1]-b[d][1])+b[d][0]&&(c=!c);return c},Triad.prototype.getEnvelope=function(a){var b=Number.MAX_VALUE,c=Number.MAX_VALUE,d=Number.MIN_VALUE,e=Number.MIN_VALUE,f=[b,c,d,e],g=a;g="Feature"===a.type?[JSON.parse(JSON.stringify(a))]:a.features;for(var h=0;h<g.length;h++)if("Point"===g[h].geometry.type)f=this.expandBBox([g[h].geometry.coordinates],f);else if("MultiPoint"===g[h].geometry.type||"LineString"===g[h].geometry.type)f=this.expandBBox(g[h].geometry.coordinates,f);else if("MuliLineString"===g[h].geometry.type||"Polygon"===g[h].geometry.type)for(var i=0;i<g[h].geometry.coordinates.length;i++)f=this.expandBBox(g[h].geometry.coordinates[i],f);else if("MultiPolygon"===g[h].geometry.type)for(var i=0;i<g[h].geometry.coordinates.length;i++)for(var j=0;j<g[h].geometry.coordinates[i].length;i++)f=this.expandBBox(g[h].geometry.coordinates[i][j],f);return{type:"Feature",geometry:{type:"Polygon",coordinates:[[[f[0],f[1]],[f[0],f[3]],[f[2],f[3]],[f[2],f[1]],[f[0],f[1]]]]},properties:{}}},Triad.prototype.getBBox=function(a){var b=JSON.parse(JSON.stringify(a.geometry.coordinates));return[[[b[0]]],[[b[1]]],[[b[2]]],[[b[3]]]]},Triad.prototype.expandBBox=function(a,b){for(var c=0;c<a.length;c++)a[c][0]<b[0]&&(b[0]=a[c][0]),a[c][0]>b[2]&&(b[2]=a[c][0]),a[c][1]<b[1]&&(b[1]=a[c][1]),a[c][1]>b[3]&&(b[3]=a[c][1]);return b},Triad.prototype.crossProduct=function(a,b,c){return(b[0]-a[0])*(c[1]-a[1])-(b[1]-a[1])*(c[0]-a[0])},Triad.prototype.isHomogeneousFeatureCollection=function(a){var b;if(0===a.features.length)return!0;b=a.features[0].geometry.type;for(var c=1;c<features.length;c++)if(a.features[c].geometry.type!==b)return!1;return!0};