/*! triad 2015-06-24 */
var Triad=function(){};Triad.prototype.getConvexHull=function(a){var b=this;if(a.features.length<=2)return{type:"Feature",geometry:{type:"Polygon",coordinates:[[]]},properties:{}};var c=a.features.map(function(a){return a.geometry.coordinates});c.sort(function(a,b){return a[0]==b[0]?a[1]-b[1]:a[0]-b[0]});for(var d=[],e=0;e<c.length;e++){for(;d.length>=2&&b.crossProduct(d[d.length-2],d[d.length-1],c[e])<=0;)d.pop();d.push(c[e])}for(var f=[],e=c.length-1;e>=0;e--){for(;f.length>=2&&b.crossProduct(f[f.length-2],f[f.length-1],c[e])<=0;)f.pop();f.push(c[e])}f.pop(),d.pop();var g=d.concat(f);g.push(g[0]);var h=JSON.stringify({type:"Feature",geometry:{type:"Polygon",coordinates:[[g]]},properties:{}});return JSON.parse(h)},Triad.prototype.getLineString=function(a){var b=a.features.map(function(a){return a.geometry.coordinates}),c=JSON.stringify({type:"Feature",geometry:b,properties:{}});return JSON.parse(c)},Triad.prototype.getPolygon=function(a){var b=[[]];if(a.features)for(var c=0;c<a.features;c++){var d=[a.featurse[c].geometry.coords[0],a.features[c].geometry.coords[1]];b[0].push(d)}else if("MultiPoint"===a.geometry.type||"LineString"===a.geometry.type){var e=JSON.stringify(a.geometry.coordinates);b=JSON.parse(e)}return{type:"Feature",geometry:{type:"Polygon",coords:b},properties:{}}},Triad.prototype.pointInPolygon=function(a,b){var c=this,d=b.geometry.coordinates;"Polygon"===b.geometry.type&&(d=[d]);var e,f=!0;if(b.bbox&&(e=b.bbox),b.geometry.bbox&&(e=b.geometry.bbox),e){var g=a.geometry.coordinates[0],h=a.geometry.coordinates[1];pointInBBox([g,h],e)&&(f=!1)}if(f)for(var i=0;i<d.length;i++)if(c.inRing(a.geometry.coordinates,d[i][0])){for(var j=1;j<d[i].length;){if(c.inRing(a.geometry.coordinates,d[i][j]))return!1;j++}return!0}return!1},Triad.prototype.pointInBBox=function(a,b){var c=a[0],d=a[1];(c<b[0]||c>b[2]||d<b[1]||d>b[3])&&(intersectsBBox=!1)},Triad.prototype.inRing=function(a,b){for(var c=!1,d=0,e=b.length-1;d<b.length;e=d++)b[d][1]>a[1]!=b[e][1]>a[1]&&a[0]<(b[e][0]-b[d][0])*(a[1]-b[d][1])/(b[e][1]-b[d][1])+b[d][0]&&(c=!c);return c},Triad.prototype.getBBox=function(a){var b,c=function(a,b){if(2!==b.length||Array.isArray(b[0]))for(var d=0;d<b.length;d++)c(a,b[d]);else b[0]<a[0]&&(a[0]=b[0]),b[1]<a[1]&&(a[1]=b[1]),b[0]>a[2]&&(a[2]=b[0]),b[1]>a[3]&&(a[3]=b[1])},d=Number.MAX_VALUE,e=Number.MAX_VALUE,f=-Number.MAX_VALUE,g=-Number.MAX_VALUE,h=[d,e,f,g];if(a.type&&"FeatureCollection"===a.type)for(var i=0;i<a.features.length;i++)b=a.features[i].geometry.coordinates,c(h,b);else if(a.type&&"GeometryCollection"===a.type)for(var i=0;i<a.geometries.length;i++)b=a.geometries[i].coordinates,c(h,b);else a.type&&"Feature"===a.type?(b=a.geometry.coordinates,c(h,b)):a.type&&(b=a.coordinates,c(h,b));return h},Triad.prototype.expandBBox=function(a,b){2!==a.length||a[0].length||(a=[a]);for(var c=0;c<a.length;c++)a[c][0]<b[0]&&(b[0]=a[c][0]),a[c][0]>b[2]&&(b[2]=a[c][0]),a[c][1]<b[1]&&(b[1]=a[c][1]),a[c][1]>b[3]&&(b[3]=a[c][1]);return b},Triad.prototype.crossProduct=function(a,b,c){return(b[0]-a[0])*(c[1]-a[1])-(b[1]-a[1])*(c[0]-a[0])},Triad.prototype.isHomogeneousFeatureCollection=function(a){var b;if(0===a.features.length)return!0;b=a.features[0].geometry.type;for(var c=0;c<features.length;c++)if(a.features[c].geometry.type!==b)return!1;return!0},Triad.prototype.clipPointsToPolygon=function(a,b){var c=this,d=c.cloneObject(gjsLine.properties),e={type:"Feature",geometry:{type:a.geometry.type,coordinates:[]},properties:d};if(0===gjsLine.geometry.coordinates.length)return e;if(0===b.geometry.coordinates.length)return e;if(!("Point"!==gjsLine.geometry.type&&"MultiPoint"!==gjsLine.geometry.type||"Polygon"!==b.geometry.type&&"MultiPolygon"!=b.geometry.type)){var f=gjsLine.geometry.coordinates;"Point"===gjsLine.type&&(f=[f]);for(var g=0;g<f.length;g++)if(c.pointInPolygon({type:"Feature",geometry:{type:"Point",coordinates:f[g],properties:{}}},b)){var h=c.cloneObject(f[g]);"Point"===gjsLine.type?e.geometry.coordinates=h:e.geometry.coordinates.push(h)}return e}},Triad.prototype.getPositions=function(a){var b=[];("Point"===a.type||"MultiPoint"===a.type||"LineString"===a.type||"MultiLineString"===a.type||"Polygon"===a.type||"MultiPolygon"===a.type)&&(b=b.concat.apply(b,a.coordinates))},Triad.prototype.clipLineStringToPolygon=function(a,b){var c=this,d=c.cloneObject(a);if(0===a.geometry.coordinates.length)return d;if(0===b.geometry.coordinates.length)return d;var e=d.geometry.coordinates;"LineString"===d.type&&(e=[e]);for(var f=0;f<e.length;f++)for(var g=-1,h=0;h<e[f].length;h++)if(h<e[f].length-1){var i=e[f][h],j=e[f][h+1],k=i[0],l=i[1],m=j[0],n=j[1],o=b.geometry.coordinates;"Polygon"===b.type&&(o=[o]);for(var q=0;q<o.length;q++)for(var r=0;r<o[q].length;r++)for(p=0;p<o[q][r].length;p++)if(p<o[q][r].length-1){var s=o[q][r][p],t=o[q][r][p+1],u=s[0],v=s[1],w=t[0],x=t[1],y=(x-v)*(m-k)-(w-u)*(n-l);if(0===y)continue;var z=l-v,A=k-u,B=(w-u)*z-(x-v)*A,C=(m-k)*z-(n-l)*A;z=B/y,A=C/y;z>0&&1>z&&A>0&&1>A&&(g=h)}}},Triad.prototype.cloneObject=function(a){var b=JSON.stringify(a);return JSON.parse(b)};